{"version": 3, "mappings": ";;;;AAIA,QAAA,aAAA;AACA,QAAA,UAAA;AACA,QAAA,KAAA;;AAGA,QAAA,WAAA,EAAA,SAAA;;AAEAA,OAAO,IAAAC,WAAAC,YAAA,CAAwB,sDAAxB;AACPC,cAAcC,cAAAC,eAAA,CAA8BL,IAA9B;AACdM,KAAKC,SAAAC,OAAA;AAILC,MAAMC,KAAA,CAAM,6DAAN;AAGNC,UAAU,CAAC,YAAD,EAAe,2HAAf;AAIV;IACI,OAAO,CAAAC,CAAA,EAAA,CAAIC,CAAJ;AADX;AAKA;;IAGIC,OAAOC,QAAAC,IAAA,CAAaP,GAAb,cAA0BE,QAA1B;IAGPM,WAAW,IAAAC,aAAA,CAAcJ,IAAAK,QAAd,EAA4B,aAA5B;IAGXC,OAAO,IAAAF,aAAA,CAAcD,QAAAI,SAAA,EAAd,EAAmC,aAAnC;IAGPC,QAAQF,IAAAG,KAAA,QAAa,eAAb,CAAAC,SAAA;IAGRC,OAAOL,IAAAG,KAAA,YAAiB,4CAAjB,CAAAG,SAAA;IAGPC,QAAQP,IAAAG,KAAA,QAAa,sBAAb,CAAAK,SAAA;IAGRC,WAAWF,KAAAG,MAAA,CAAY,KAAZ;IACXC,gBAAgBN,IAAAO,MAAA,CAAW,KAAX;IAGhBC,WAAWJ,QAAAK,QAAA,CAAiB,GAAjB,EAAsB,EAAtB;IACXC,eAAeJ,aAAAK,QAAA,CAAsB,GAAtB,EAA2B,EAA3B;IAGfC,WAAWJ,QAAAK,KAAA,CAAc,GAAd;IACXC,YAAYJ,YAAAK,KAAA,CAAkB,GAAlB;IAGZC,UAAUR,cAAA,CAAS,CAAT,EAAWI,QAAX;IACVK,cAAcP,kBAAA,CAAa,CAAb,EAAeI,SAAf;IAGdI,6BAAY,CAAMF,OAAN;IACZG,gCAAe,CAAMF,WAAN;IAGfG,gBAAgBF;IAChBG,eAAeF;eAGf,CAAM,gBAAN;eACA,CAAMtB,KAAAyB,MAAA,EAAN;eACA,CAAM,mBAAN;eACA,CAAMtB,IAAN;eACA,CAAM,cAAN;eACA,CAAME,KAAN;IAGAqB,4BAAW,CAAMtC,KAAA,CAAM,kEAAN,CAAN;IACXuC,eAAgB,kDAAA,CAAA,CAAoCJ,aAApC,EAAmDC,YAAnD,EAAiE,CAAjE,EAAoE,EAAA,CAAC,CAAD,CAApE;;;IAChBI,mBAAmBC,mBAAA,kBAAoB,CAAMH,QAAN,CAApB,EAAqC,GAArC;IAGnBI,aAAa1C,KAAA,CAAM,4CAAN;IAGb,OAAM,CAAAuC,YAAA,GAAA,CAAgBC,gBAAhB,CAAN;mBACI,CAAM,qGAAN;mBACA,CAAM,2EAAN;QACAG,IAAAC,MAAA,CAAW,IAAX;IAHJ;IAKA,IAAG,CAAAL,YAAA,GAAA,CAAgBC,gBAAhB,CAAH;QACIK,MAAA,CAAOH,UAAP;IADJ;AAlEJ;AAsEA;;IAGII,SAAS,IAAAC,OAAAC,KAAA,CAAa,gBAAb,EAA+B,GAA/B;IACTF,MAAAG,KAAA;IAEAH,MAAAI,SAAA;IACAJ,MAAAG,KAAA;IACAH,MAAAK,MAAA,CAAa,2BAAb,EAA0C,kBAA1C;IAGAC,UAAU;IACVC,OAAO,CAAA,8FAAA,EACuCtD,GADvC;IAEPuD;;;;IAGAR,MAAAS,SAAA,CAAgB,2BAAhB,EAA6Cb,UAA7C,EAAyDY,GAAzD;eAGA,CAAM,8CAAN;IAGAR,MAAAU,KAAA;AAvBJ;AA2BAC,aAAA", "sources": ["scrape.py"], "names": ["cred", "credentials", "credentials.Certificate", "default_app", "firebase_admin", "firebase_admin.initialize_app", "db", "firestore", "firestore.client", "URL", "input", "headers", "a", "b", "page", "requests", "requests.get", "soup_old", "BeautifulSoup", "page.content", "soup", "soup_old.prettify", "title", "soup.find", "soup.find({\"id\": \"productTitle\"}).get_text", "full", "soup.find({\"class_\": \"priceBlockStrikePriceString a-text-strike\"}).get_text", "price", "soup.find({\"id\": \"priceblock_ourprice\"}).get_text", "stripped", "price.strip", "stripped_full", "full.strip", "replacer", "stripped.replace", "replace_full", "stripped_full.replace", "find_dot", "replacer.find", "find_full", "replace_full.find", "changer", "change_full", "converter", "convert_full", "current_price", "current_full", "title.strip", "discount", "get_discount", "percentage_shift", "discount_conversion", "email_list", "time", "time.sleep", "sender", "server", "smtplib", "smtplib.SMTP", "server.ehlo", "server.starttls", "server.login", "subject", "body", "msg", "server.sendmail", "server.quit", "price_tracker"], "sourcesContent": ["import requests\nimport traceback\nimport smtplib\nimport time\nfrom bs4 import BeautifulSoup\nfrom lxml.html import fromstring\nfrom itertools import cycle\n# Initialize Admin SDK from Firebase\nimport firebase_admin\nfrom firebase_admin import credentials, firestore\n\ncred = credentials.Certificate('amzspy-ed060-firebase-adminsdk-ombif-5fa1965a13.json')\ndefault_app = firebase_admin.initialize_app(cred)\ndb = firestore.client()\n\n\n# Get a URL from the user\nURL = input(\"Copy & Paste The Amazon URL You Would Like To Price Track: \")\n\n# For utilizing the Chrome Browser\nheaders = {\"User-Agent\": 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36'}\n\n\n# OOP Component of Polymorphism\ndef discount_conversion(a, b):\n    return a / b\n\n\n# Track price for user\ndef price_tracker():\n\n    # Get the page you're searching for\n    page = requests.get(URL, headers=headers)\n\n    # Used to bypass anti-scraping\n    soup_old = BeautifulSoup(page.content, \"html.parser\")\n\n    # Used to gather data on Amazon product page\n    soup = BeautifulSoup(soup_old.prettify(), \"html.parser\")\n\n    # Find the title\n    title = soup.find(id=\"productTitle\").get_text()\n\n    # Find the full price\n    full = soup.find(class_=\"priceBlockStrikePriceString a-text-strike\").get_text()\n\n    # Find the price\n    price = soup.find(id=\"priceblock_ourprice\").get_text()\n\n    # Strip the price of non-numbers\n    stripped = price.strip(\"$ ,\")\n    stripped_full = full.strip(\"$ ,\")\n\n    # Replace the commas with empty character\n    replacer = stripped.replace(\",\", \"\")\n    replace_full = stripped_full.replace(\",\", \"\")\n\n    # Find the dot in the price\n    find_dot = replacer.find(\".\")\n    find_full = replace_full.find(\".\")\n\n    # Convert the price by removing the cents\n    changer = replacer[0:find_dot]\n    change_full = replace_full[0:find_full]\n\n    # The price, fully converted\n    converter = float(changer)\n    convert_full = float(change_full)\n\n    # Store the current price for comparison\n    current_price = converter\n    current_full = convert_full\n\n    # Print the original price, product title, and current sale price\n    print(\"Your Product: \")\n    print(title.strip())\n    print(\"Your List Price: \")\n    print(full)\n    print(\"Your Price: \")\n    print(price)\n\n    # input, Lambda & polymorphism to determine discount\n    discount = float(input(\"How big of a discount are you looking for? (Ex: 10 for 10% off) \"))\n    get_discount = (lambda a, b, c, d: ((a/b) - c) * d)(current_price, current_full, 1, -1)\n    percentage_shift = discount_conversion(float(discount), 100)\n\n    # User info:\n    email_list = input(\"Enter Your Email: (Ex: andysok@gmail.com) \")\n\n    # Check hourly for price shifts\n    while get_discount <= percentage_shift:\n        print(\"Your product is not at the desired discount yet. We will check hourly to see any price differences.\")\n        print(\"You will receive an email in your inbox once your discount is available..\")\n        time.sleep(3600)\n\n    if get_discount >= percentage_shift:\n        sender(email_list)\n\n\ndef sender(email_list):\n\n    # Connect email server and email account\n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.ehlo()\n    # Starts the encrypted communication with the server\n    server.starttls()\n    server.ehlo()\n    server.login('endlesskhaiandy@gmail.com', 'ivdnvcsckaporjco')\n\n    # Email message to send to list / Add the URL variable in the body of the email\n    subject = 'New Amazon Product Price Alert!'\n    body = 'Hey Smart Shopper, a product you want has a lower price! ' \\\n           'Check it out by clicking the link: ', URL\n    msg = f\"Subject: {subject}\\n\\n{body}\"\n\n    # Send the mail!\n    server.sendmail('endlesskhaiandy@gmail.com', email_list, msg)\n\n    # Email Confirmation\n    print('Thanks for your patience; Check your email! ')\n\n    # Terminate\n    server.quit()\n\n\n# Run the price tracker\nprice_tracker()\n"]}