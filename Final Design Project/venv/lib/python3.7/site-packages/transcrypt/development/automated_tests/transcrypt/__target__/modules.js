// Transcrypt'ed from Python, 2019-01-22 11:20:18
var modules = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __conj__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, complex, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, format, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as mod4 from './modules.mod4.js';
import {A} from './modules.mod1.mod11.mod111.js';
import {mod3GetTwoHundred, mod3Hundred, x} from './modules.mod3.js';
import * as aMod21 from './modules.mod2.mod21.js';
import * as aMod22 from './modules.mod2.mod22.js';
import * as mod111 from './modules.mod1.mod11.mod111.js';
import * as mod112 from './modules.mod1.mod11.mod112.js';
import * as aMod1 from './modules.mod1.js';
import * as aliasMod111 from './modules.mod1.mod11.mod111.js';
import * as __module_modules_mod2_mod22__ from './modules.mod2.mod22.js';
__nest__ (modules, 'mod2.mod22', __module_modules_mod2_mod22__);
import * as __module_modules_mod2_mod21__ from './modules.mod2.mod21.js';
__nest__ (modules, 'mod2.mod21', __module_modules_mod2_mod21__);
import * as __module_modules_mod2__ from './modules.mod2.js';
__nest__ (modules, 'mod2', __module_modules_mod2__);
import * as __module_modules_mod1_mod11__ from './modules.mod1.mod11.js';
__nest__ (modules, 'mod1.mod11', __module_modules_mod1_mod11__);
import * as __module_modules_mod1__ from './modules.mod1.js';
__nest__ (modules, 'mod1', __module_modules_mod1__);
import * as __module_modules_mod1_mod11_mod112__ from './modules.mod1.mod11.mod112.js';
__nest__ (modules, 'mod1.mod11.mod112', __module_modules_mod1_mod11_mod112__);
import * as __module_modules_mod3__ from './modules.mod3.js';
__nest__ (modules, 'mod3', __module_modules_mod3__);
import * as __module_modules_mod1_mod11_mod111__ from './modules.mod1.mod11.mod111.js';
__nest__ (modules, 'mod1.mod11.mod111', __module_modules_mod1_mod11_mod111__);
export {mod3GetTwoHundred, aliasMod111, A, aMod21, mod112, mod4, mod111, aMod22, mod3Hundred, x, aMod1};
var __all__ = dict ({get __name__ () {return __name__;}, set __name__ (value) {__name__ = value;}, get a () {return a;}, set a (value) {a = value;}, get f () {return f;}, set f (value) {f = value;}, get pi () {return pi;}, set pi (value) {pi = value;}, get run () {return run;}, set run (value) {run = value;}});
var __name__ = 'modules';
export var a = modules.mod1.mod11.mod111.A (12345);
export var pi = modules.mod1.pi;
export var f = modules.mod2.f;
export var run = function (autoTester) {
	autoTester.check ('modules');
	autoTester.check (a.f ());
	autoTester.check (modules.mod1.mod11.mod112.f ());
	autoTester.check (modules.mod1.mod11.e);
	autoTester.check (pi);
	autoTester.check (f (102030));
	autoTester.check (modules.mod2.mod21.f ());
	var B = modules.mod2.mod22.B;
	var b = B ();
	autoTester.check (b.x);
	autoTester.check (modules.mod3.x);
	var a2 = aliasMod111.A (6789101112);
	autoTester.check (a2.f ());
	autoTester.check (aMod1.pi);
	var a3 = mod111.A (100.001);
	autoTester.check (a3.f ());
	autoTester.check (mod112.f ());
	autoTester.check (aMod21.f ());
	autoTester.check (aMod22.B ().x);
	autoTester.check (mod3Hundred);
	autoTester.check (mod3GetTwoHundred ());
	autoTester.check (A (123.321).f ());
	autoTester.check (mod4.mod4Add2FromMod5 (449));
};

//# sourceMappingURL=modules.map